{
  "env": {
    "browser": true,
    "node": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.eslint.json"
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:promise/recommended",
    "plugin:unicorn/recommended",
    "prettier"
  ],
  "plugins": ["formatjs"],
  "settings": {
    "import/resolver": {
      "alias": {
        "map": [
          ["~components", "./src/components"],
          ["~messages", "./src/messages"],
          ["~pages", "./src/pages"],
          ["~providers", "./src/providers"],
          ["~store", "./src/store"],
          ["~utils", "./src/utils"],
          ["~Test", "./src/Test.tsx"]
        ],
        "extensions": [".ts", ".tsx"]
      }
    },
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "@typescript-eslint/consistent-type-imports": ["error"],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": ["enumMember", "typeLike"],
        "format": ["StrictPascalCase"]
      },
      {
        "selector": ["variable"],
        "format": ["strictCamelCase", "StrictPascalCase", "UPPER_CASE"]
      },
      {
        "selector": ["typeProperty"],
        "format": ["strictCamelCase"]
      },
      {
        "selector": ["typeProperty", "variable"],
        "types": ["boolean"],
        "prefix": ["has", "is"],
        "format": ["StrictPascalCase"]
      },
      {
        "selector": "variable",
        "modifiers": ["destructured"],
        "format": null
      }
    ],
    "@typescript-eslint/no-empty-interface": [
      "error",
      {
        "allowSingleExtends": true
      }
    ],
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used",
        "ignoreRestSiblings": true
      }
    ],
    "@typescript-eslint/padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "block-like",
          "const",
          "export",
          "function",
          "import",
          "let",
          "return",
          "throw",
          "type"
        ]
      },
      {
        "blankLine": "any",
        "prev": ["const", "let"],
        "next": ["const", "let"]
      },
      {
        "blankLine": "any",
        "prev": ["export", "import"],
        "next": ["export", "import"]
      }
    ],
    "@typescript-eslint/prefer-nullish-coalescing": ["error"],
    "@typescript-eslint/prefer-reduce-type-parameter": ["error"],
    "@typescript-eslint/promise-function-async": [
      "error",
      {
        "checkArrowFunctions": true
      }
    ],
    "formatjs/enforce-default-message": ["error", "literal"],
    "formatjs/enforce-id": ["error"],
    "formatjs/no-camel-case": ["error"],
    "formatjs/no-emoji": ["error"],
    "formatjs/no-multiple-plurals": ["error"],
    "formatjs/no-multiple-whitespaces": ["error"],
    "formatjs/no-offset": ["error"],
    "import/first": ["error"],
    "import/order": [
      "error",
      {
        "alphabetize": {
          "caseInsensitive": true,
          "order": "asc"
        },
        "groups": ["builtin", "external", "internal", "parent", "sibling"],
        "newlines-between": "always",
        "pathGroups": [
          {
            "pattern": "~*",
            "group": "internal"
          },
          {
            "pattern": "~*/**",
            "group": "internal"
          }
        ],
        "warnOnUnassignedImports": true
      }
    ],
    "max-params": ["error", 2],
    "no-console": [
      "error",
      {
        "allow": ["info", "error", "warn"]
      }
    ],
    "promise/prefer-await-to-then": ["error"],
    "react/boolean-prop-naming": [
      "error",
      {
        "validateNested": true
      }
    ],
    "react/display-name": "off",
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "react/jsx-boolean-value": ["error"],
    "react/jsx-fragments": ["error"],
    "react/jsx-props-no-spreading": ["error"],
    "react/jsx-no-useless-fragment": ["error"],
    "react/jsx-pascal-case": ["error"],
    "react/no-multi-comp": ["error"],
    "react/prop-types": "off",
    "unicorn/filename-case": [
      "error",
      {
        "cases": {
          "camelCase": true,
          "pascalCase": true
        }
      }
    ],
    "unicorn/no-array-reduce": "off",
    "unicorn/no-null": "off",
    "unicorn/no-useless-undefined": [
      "error",
      {
        "checkArguments": false
      }
    ],
    "unicorn/prefer-node-protocol": "off",
    "unicorn/prefer-string-replace-all": ["error"],
    "unicorn/prevent-abbreviations": [
      "error",
      {
        "replacements": {
          "arg": false,
          "args": false,
          "dst": false,
          "env": false,
          "img": false,
          "param": false,
          "params": false,
          "prop": false,
          "props": false,
          "ref": false,
          "req": false,
          "res": false,
          "src": false
        }
      }
    ]
  },
  "overrides": [
    {
      "files": ["*.ts"],
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": "off"
      }
    }
  ],
  "ignorePatterns": ["*.js"]
}
