name: ci

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: snyk/actions/node@master
        with:
          args: --severity-threshold=high --fail-on=all
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: fossas/fossa-action@main
        with:
          api-key: ${{secrets.FOSSA_API_KEY}}
      - uses: fossas/fossa-action@main
        with:
          api-key: ${{secrets.FOSSA_API_KEY}}
          run-tests: true

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
      - name: 🛡️ Typecheck project
        run: pnpm turbo typecheck
      - name: 🔦 Lint project
        run: pnpm turbo lint
      - name: 🧪 Test coverage
        run: pnpm turbo test:coverage

  versioning:
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    needs:
      - security
      - licenses
      - test
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup
      - uses: changesets/action@v1
        id: changesets
        with:
          title: 'chore: update versions'
          commit: 'chore: update versions'
          createGithubReleases: false
          publish: pnpm changeset tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  vite-status:
    if: ${{ needs.versioning.outputs.published == 'true' }}
    needs:
      - versioning
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status-affected.outputs.status }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: 🔎 Check status
        id: ignore-check
        run: npx turbo-ignore vite
        continue-on-error: true
      - name: ✅ Set status
        id: status-affected
        if: ${{ steps.ignore-check.outcome == 'failure' }}
        run: echo "status=affected" >> $GITHUB_OUTPUT

  vite-build:
    if: ${{ needs.vite-status.outputs.status == 'affected' }}
    needs:
      - vite-status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
      - name: 🔧 Prune
        run: |
          pnpm turbo prune --scope=@template-react/vite
          pnpm dlx rimraf ./out/**/node_modules
          mv ./.git ./out/.git
      - name: 📦 Install
        run: pnpm i
        working-directory: ./out
      - name: 🏗️ Build
        run: pnpm turbo build --filter=vite...
        working-directory: ./out
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: ./out/apps/vite/dist
          if-no-files-found: error
          retention-days: 1
